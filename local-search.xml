<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>统信UOS 操作系统简介</title>
    <link href="/2024/11/20/uos-introduce/"/>
    <url>/2024/11/20/uos-introduce/</url>
    
    <content type="html"><![CDATA[<h2 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h2><p>近年来，软件国产化的呼声越来越高，而操作系统国产化是软件国产化过程中核心的一环，自然也不例外。目前国产操作系统有 <strong>统信UOS</strong>、<strong>麒麟（Kylin）</strong>  和 <strong>openEuler</strong> 等，本篇文章为大家介绍 统信UOS 操作系统，主要包括</p><ul><li>统信UOS 简介</li><li>版本介绍</li><li>选择建议与系统展示</li><li>总结</li></ul><h2 id="二、统信UOS-简介"><a href="#二、统信UOS-简介" class="headerlink" title="二、统信UOS 简介"></a>二、统信UOS 简介</h2><h3 id="2-1-什么是统信UOS"><a href="#2-1-什么是统信UOS" class="headerlink" title="2.1 什么是统信UOS"></a>2.1 什么是统信UOS</h3><p><strong>统信UOS</strong> 是 <a href="https://www.uniontech.com/">统信软件技术有限公司</a> 基于 Linux 开发的国产化操作系统发行版。主要目标是为中国市场提供一个可靠的替代方案。统信UOS 继承了开源社区的优势，并结合国内用户的需求进行了深度定制和优化。它支持多种处理器架构（包括x86、ARM等），兼容各种硬件平台。统信UOS 提供了桌面版、服务器版、云终端专用版等。</p><h3 id="2-2-统信UOS-和-Deepin-是什么关系"><a href="#2-2-统信UOS-和-Deepin-是什么关系" class="headerlink" title="2.2 统信UOS 和 Deepin 是什么关系"></a>2.2 统信UOS 和 Deepin 是什么关系</h3><p>Deepin（深度操作系统）是一个具有一定国际影响力的开源操作系统，其研发公司<strong>深度科技是统信软件的全资子公司</strong>。在定位上，统信UOS 是<strong>商业发行版</strong>，而深度Deepin 则为<strong>社区发行版</strong>。<strong>社区发行版</strong>是开源免费的，而<strong>商业发行版</strong>是需要付费的。统信UOS 和 Deepin 之间的关系就像是 Redhat RHEL 和 Fedora。一些新技术，都会经过深度社区版本的验证，待成熟后纳入统信UOS。</p><h2 id="三、版本介绍"><a href="#三、版本介绍" class="headerlink" title="三、版本介绍"></a>三、版本介绍</h2><p>统信UOS 针对不同的用户群体，提供了<a href="https://faq.uniontech.com/desktop/f435/install/da34">四种不同版本的桌面操作系统</a>，分别是：<a href="https://home.uniontech.com/">家庭版、</a>​<a href="https://www.uniontech.com/OS-Professional-edition.html">专业版</a>、<a href="https://www.uniontech.com/OS-Educational-edition.html">教育版</a>、<a href="https://www.deepin.org/index/zh">社区版</a> 。</p><h3 id="3-1-家庭版"><a href="#3-1-家庭版" class="headerlink" title="3.1 家庭版"></a>3.1 家庭版</h3><p><a href="https://home.uniontech.com/">统信UOS 家庭版</a> 对视觉和交互体验进一步优化，为个人用户提供美观易用的国产操作系统。一键安装，自动高效，软件应用生态更加丰富。跨屏协同，电脑与手机互联，轻松管理手机文件。试用期免费获得1年的使用，随后需要正式激活使用。</p><h3 id="3-2-专业版"><a href="#3-2-专业版" class="headerlink" title="3.2 专业版"></a>3.2 专业版</h3><p><a href="https://www.uniontech.com/OS-Professional-edition.html">统信UOS 专业版</a> 是由统信开发的一款基于Linux内核的桌面操作系统，同源异构支持全CPU架构，提供高效简洁的操作交互、美观易用的桌面应用和安全稳定的系统服务。试用期免费获得90天的使用，随后需要单位采购授权，获得正式激活码后才可以正常使用。</p><h3 id="3-3-教育版"><a href="#3-3-教育版" class="headerlink" title="3.3 教育版"></a>3.3 教育版</h3><p><a href="https://www.uniontech.com/OS-Educational-edition.html">统信UOS 教育版</a> 是国内首款国产化教育教学操作系统，可实现校园软件正版化使用，构建全新的校园信息安全基座，推动教育数字化，发展智慧校园。试用期免费获得90天的使用，随后需要单位采购授权，获得正式激活码后才可以正常使用。</p><h3 id="3-4-社区版"><a href="#3-4-社区版" class="headerlink" title="3.4 社区版"></a>3.4 社区版</h3><p><a href="https://www.uniontech.com/OS-Community-edition.html">统信UOS 社区版</a> 为 <a href="https://www.deepin.org/index/zh">Deepin</a>。面向的是开发者、爱好者等群体，其致力于服务全球 Deepin 用户，系统具有极高的易用性、优秀的交互体验、多款自研应用、全面的生态体系、高效的优化反馈机制为用户提供最好的 Linux 开源体验环境。开源免费，无试用期限制，默认开启开发者模式。</p><h2 id="三、选择建议与系统展示"><a href="#三、选择建议与系统展示" class="headerlink" title="三、选择建议与系统展示"></a>三、选择建议与系统展示</h2><h3 id="3-1-如何选择"><a href="#3-1-如何选择" class="headerlink" title="3.1 如何选择"></a>3.1 如何选择</h3><p>企业用户建议选择专业版，有更好的硬件适配和售后服务支持。学校用户选择教育版，可适配学校相关软件。个人用户可以选择家庭版或者社区版，我建议使用社区版，社区版软件更新更快，硬件兼容性也更好。</p><h3 id="3-2-系统展示"><a href="#3-2-系统展示" class="headerlink" title="3.2 系统展示"></a>3.2 系统展示</h3><p>我目前使用的是 <a href="https://www.deepin.org/index/zh">Deepin 23</a> ， 搭载了 Linux 6.6 LTS 及 6.9 主线双内核以及全新的桌面环境。</p><h5 id="3-2-1-系统布局"><a href="#3-2-1-系统布局" class="headerlink" title="3.2.1 系统布局"></a>3.2.1 系统布局</h5><p>Deepin 23 的桌面布局很简洁，底部是工作区、菜任务栏、系统托盘</p><p><img src="https://b3logfile.com/file/2024/11/siyuan/1524822749398/assets/01-20241115142828-dhbw2uu.png" alt="01" title="Deepin 系统界面"></p><h5 id="3-2-2-应用商店"><a href="#3-2-2-应用商店" class="headerlink" title="3.2.2 应用商店"></a>3.2.2 应用商店</h5><p>应用商店有很多常用的软件，可以一键安装</p><p><img src="https://b3logfile.com/file/2024/11/siyuan/1524822749398/assets/02-20241115143121-atzuwcr.png" alt="02" title="Deepin 应用商店"></p><h5 id="3-2-3-个性化配置"><a href="#3-2-3-个性化配置" class="headerlink" title="3.2.3 个性化配置"></a>3.2.3 个性化配置</h5><p>个性化设置，系统提供了多种颜色主题搭配</p><p><img src="https://b3logfile.com/file/2024/11/siyuan/1524822749398/assets/image-20241115150858-5n2hkv2.png" alt="image" title="Deepin 个性化设置"></p><h5 id="3-2-4-终端"><a href="#3-2-4-终端" class="headerlink" title="3.2.4 终端"></a>3.2.4 终端</h5><p>方便快捷的终端</p><p><img src="https://b3logfile.com/file/2024/11/siyuan/1524822749398/assets/image-20241115150606-626kcol.png" alt="image" title="Deepin 终端"></p><h2 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h2><p>一直以来电脑桌面操作系统一直是 Windows 和 macOS 系统的天下，虽然 Linux 已经有了很多优秀的桌面发行版，如 Debian、 Ubuntu、Ferdora、Arch、openSUSE等，但是它们中的一些系统要么安装困难，不适合普通用户；要么软件生态不够丰富，不能满足日常办公需求。想体验 Linux 操作系统，那么可以试试统信UOS（Deepin）操作系统，简单上手，开箱即用，界面也很美观，对国内用户友好，有适合国内用户的软件生态。</p>]]></content>
    
    
    <categories>
      
      <category>操作系统</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux,Deepin</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>WSL 安装与使用</title>
    <link href="/2024/11/13/wsl-install-and-usage/"/>
    <url>/2024/11/13/wsl-install-and-usage/</url>
    
    <content type="html"><![CDATA[<h2 id="一、WSL-概述"><a href="#一、WSL-概述" class="headerlink" title="一、WSL 概述"></a>一、WSL 概述</h2><p><strong>Windows Subsystem for Linux (WSL)</strong>   是微软开发的一个技术，允许用户在 Windows 操作系统上直接运行 Linux 命令行和一些基本的 Linux 应用程序。通过这种方式，用户可以在不切换到虚拟机或双系统安装的情况下，使用 Linux 工具和环境。</p><h2 id="二、WSL-安装"><a href="#二、WSL-安装" class="headerlink" title="二、WSL 安装"></a>二、WSL 安装</h2><p>可以通过 <code>wsl --install</code>​ 指令和 Microsoft Store 两种方式安装 <strong>WSL</strong> 。</p><h3 id="2-1-通过命令"><a href="#2-1-通过命令" class="headerlink" title="2.1 通过命令"></a>2.1 通过命令</h3><h5 id="2-1-1-安装默认的版本"><a href="#2-1-1-安装默认的版本" class="headerlink" title="2.1.1 安装默认的版本"></a>2.1.1 安装默认的版本</h5><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment"># 安装默认的 ubuntu</span><br>wsl <span class="hljs-literal">--install</span><br></code></pre></td></tr></table></figure><h5 id="2-1-2-查看可安装的版本"><a href="#2-1-2-查看可安装的版本" class="headerlink" title="2.1.2 查看可安装的版本"></a>2.1.2 查看可安装的版本</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">查看可以安装的版本 或者</span> <br>wsl -l -o<br></code></pre></td></tr></table></figure><p>​<img src="https://b3logfile.com/file/2024/11/siyuan/1524822749398/assets/image-20241112182345-ftln2wu.png" alt="image">​</p><h5 id="2-1-3-查看可安装的版本"><a href="#2-1-3-查看可安装的版本" class="headerlink" title="2.1.3 查看可安装的版本"></a>2.1.3 查看可安装的版本</h5><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><br><span class="hljs-comment"># 安装指定版本</span><br>wsl <span class="hljs-literal">--install</span> &lt;Distribution Name&gt;<br></code></pre></td></tr></table></figure><p>例如：通过 <code>wsl --install Kali-linux</code>​ 命令安装 Kali-linux 。</p><p>​<img src="https://b3logfile.com/file/2024/11/siyuan/1524822749398/assets/image-20241112182800-si00wcl.png" alt="image">​</p><h3 id="2-2-通过-Microsoft-Store-安装"><a href="#2-2-通过-Microsoft-Store-安装" class="headerlink" title="2.2 通过 Microsoft Store 安装"></a>2.2 通过 <a href="https://aka.ms/wslstore">Microsoft Store</a> 安装</h3><p>在 Microsoft Store 里面输入 WSL 搜索可以看到有很多不同版本的 WSL</p><p>​<img src="https://b3logfile.com/file/2024/11/siyuan/1524822749398/assets/image-20241112183148-5mtfzbj.png" alt="image">​</p><p>选择一个自己喜欢的点进去安装即可</p><p>​<img src="https://b3logfile.com/file/2024/11/siyuan/1524822749398/assets/image-20241112183039-0v50oao.png" alt="image">​</p><p>‍</p><h3 id="2-3-WSL-配置"><a href="#2-3-WSL-配置" class="headerlink" title="2.3 WSL 配置"></a>2.3 WSL 配置</h3><p>安装成功后，需要配置用户名和密码，如下图所示：</p><p>​<img src="https://b3logfile.com/file/2024/11/siyuan/1524822749398/assets/image-20241112182247-l6stubl.png" alt="image">​</p><h2 id="三、WSL-使用"><a href="#三、WSL-使用" class="headerlink" title="三、WSL 使用"></a>三、WSL 使用</h2><p>WSL 就是一个 Linux 系统，可以用来安装常用的开发软件，虽然有时候性能可能没真正的 Linux 系统那么好，但是也能将就着用。</p><h3 id="3-1-常用命令"><a href="#3-1-常用命令" class="headerlink" title="3.1 常用命令"></a>3.1 常用命令</h3><h5 id="3-1-1-查看当前安装的-WSL"><a href="#3-1-1-查看当前安装的-WSL" class="headerlink" title="3.1.1 查看当前安装的 WSL"></a>3.1.1 查看当前安装的 WSL</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">wsl -l -v<br></code></pre></td></tr></table></figure><p>可以看到我现在安装了以下几个版本的 <code>WSL </code>​，<code>Arch </code>​前面的  *****  号表示它是我当前默认的 <code>WSL </code>​。</p><p>​<img src="https://b3logfile.com/file/2024/11/siyuan/1524822749398/assets/image-20241112183311-8uv4p5r.png" alt="image">​</p><h5 id="3-1-2-切换-wsl"><a href="#3-1-2-切换-wsl" class="headerlink" title="3.1.2  切换 wsl"></a>3.1.2  切换 wsl</h5><p>我们将 <code>Kali-linux</code>​ 切换为默认的 <code>WSL</code>​ 。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">wsl -s Kali-linux<br></code></pre></td></tr></table></figure><p>​<img src="https://b3logfile.com/file/2024/11/siyuan/1524822749398/assets/image-20241112183627-c332pov.png" alt="image">​</p><p>‍</p><h2 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h2><p><strong>WSL</strong>  是一个强大的工具，它允许用户在 Windows 操作系统上直接运行  Linux 命令行和应用程序。对于需要使用 Linux 系统的人来说，<strong>WSL</strong> 的安装使用，比通过虚拟机或者双系统的模式来使用 Linux 系统要简单的多。</p><p>‍</p>]]></content>
    
    
    <categories>
      
      <category>操作系统</category>
      
    </categories>
    
    
    <tags>
      
      <tag>windows, wsl</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Docker 安装 ElasticSearch 和 Kibana</title>
    <link href="/2023/09/09/docker-install-elasticsearch-and-kibana/"/>
    <url>/2023/09/09/docker-install-elasticsearch-and-kibana/</url>
    
    <content type="html"><![CDATA[<h2 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h2><p>本篇博客主要记录了我安装最新版的<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/index.html"> ElasticSearch </a> 和 <a href="https://www.elastic.co/guide/en/kibana/current/index.html">Kibana</a> 的过程。我的操作系统是 Arch Linux，使用 Docker 来安装，相较于 7.x 版本，8.x 版本增加了一些安全配置，安装过程会更复杂一些，所以写了这篇博客来记录一下，希望可以帮到有需要的朋友。</p><h2 id="二、安装配置-Elasticsearch"><a href="#二、安装配置-Elasticsearch" class="headerlink" title="二、安装配置 Elasticsearch"></a>二、安装配置 Elasticsearch</h2><h3 id="2-1-创建网络"><a href="#2-1-创建网络" class="headerlink" title="2.1 创建网络"></a>2.1 创建网络</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker network create elastic<br></code></pre></td></tr></table></figure><h3 id="2-2-安装-Elasticsearch"><a href="#2-2-安装-Elasticsearch" class="headerlink" title="2.2 安装 Elasticsearch"></a>2.2 安装 Elasticsearch</h3><p><strong>前置条件</strong>：</p><p>创建 <code>/etc/sysctl.conf</code> 配置文件，设置 <code>vm.max_map_count</code> 值为 262144  (如果不这样做，直接运行 Elasticsearch 容器会报错： <code>max virtual memory areas vm.max\_map\_count [65530] is too low, increase to at least [262144]</code>)。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">创建sysctl.conf</span><br>sudo nvim /etc/sysctl.conf<br><span class="hljs-meta prompt_"># </span><span class="language-bash">添加以下内容</span><br>vm.max_map_count=262144<br><span class="hljs-meta prompt_"># </span><span class="language-bash">刷新配置</span><br>sudo sysctl -p <br></code></pre></td></tr></table></figure><p>Elasticsearch 容器创建指令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker run --name es --net elastic -p 9200:9200 -itd -m 1GB docker.elastic.co/elasticsearch/elasticsearch:8.9.2<br></code></pre></td></tr></table></figure><p>需注意一点，如果是使用 Docker Desktop，需要设置至少 4G 的内存：<br><img src="https://b3logfile.com/file/2023/09/siyuan/1524822749398/assets/image-20230909160533-kpwf1r9.png" alt="image" title="设置内存"></p><p>设置方式如下：</p><p><img src="https://b3logfile.com/file/2023/09/siyuan/1524822749398/assets/image-20230331112732-pztnqgt.png" alt="image" title="Docker Desktop 内存设置"></p><h3 id="2-3-配置"><a href="#2-3-配置" class="headerlink" title="2.3 配置"></a>2.3 配置</h3><h5 id="2-3-1-重置密码"><a href="#2-3-1-重置密码" class="headerlink" title="2.3.1 重置密码"></a>2.3.1 重置密码</h5><p>启动 ElasticSearch 的时候会默认生成一个密码，但是不方便记住，可以通过下面的指令，重置密码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker exec -it es /usr/share/elasticsearch/bin/elasticsearch-reset-password -i -u elastic<br></code></pre></td></tr></table></figure><p>建议将自己创建的密码，配置到环境变量中 <code>export ELASTIC_PASSWORD=&quot;your_password&quot;</code>。</p><h5 id="2-3-2-复制-SSL-证书"><a href="#2-3-2-复制-SSL-证书" class="headerlink" title="2.3.2 复制 SSL 证书"></a>2.3.2 复制 SSL 证书</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker cp es:/usr/share/elasticsearch/config/certs/http_ca.crt .<br></code></pre></td></tr></table></figure><h5 id="2-3-2-验证是否配置成功"><a href="#2-3-2-验证是否配置成功" class="headerlink" title="2.3.2 验证是否配置成功"></a>2.3.2 验证是否配置成功</h5><p>输入下面的指令，使用 SSL 证书和密码访问 ElasticSearch</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">curl --cacert http_ca.crt -u elastic:$ELASTIC_PASSWORD https://localhost:9200<br></code></pre></td></tr></table></figure><p>终端输出如下图所示，则说明配置成功了！</p><p><img src="https://b3logfile.com/file/2023/09/siyuan/1524822749398/assets/image-20230909152150-7y0hiu3.png" alt="image" title="ElasticSearch 验证"></p><p>‍</p><h2 id="三、安装配置-Kibana"><a href="#三、安装配置-Kibana" class="headerlink" title="三、安装配置 Kibana"></a>三、安装配置 Kibana</h2><p>需要注意一点，Kibana 最好和 ElasticSearch 使用一样的版本。</p><h3 id="3-1-安装-Kibana"><a href="#3-1-安装-Kibana" class="headerlink" title="3.1 安装 Kibana"></a>3.1 安装 Kibana</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker run --name kib --net elastic -p 5601:5601 -itd docker.elastic.co/kibana/kibana:8.9.2 <br></code></pre></td></tr></table></figure><h3 id="3-2-配置-Kibana"><a href="#3-2-配置-Kibana" class="headerlink" title="3.2 配置 Kibana"></a>3.2 配置 Kibana</h3><p>第一次使用 Kibana 的时候，会提示需要 enrollment token</p><p><img src="https://b3logfile.com/file/2023/09/siyuan/1524822749398/assets/image-20230909153242-l0sqjb5.png" alt="image" title="设置 enrollment token"></p><p>在启动 ElasticSearch 的时候，会自动生成一个 enrollment token，可以通过  <code>docker logs -f es</code> 来查看，也可以通过下面的指令，生成一个新的 enrollment token</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker exec -it es /usr/share/elasticsearch/bin/elasticsearch-create-enrollment-token -s kibana<br></code></pre></td></tr></table></figure><p>将 enrollment token 复制到刚才的提示框里，然后会提示需要输入验证码，可以使用 <code>docker logs -f kib</code>来查看验证码。</p><p><img src="https://b3logfile.com/file/2023/09/siyuan/1524822749398/assets/image-20230909153408-pchzcq5.png" alt="image" title="查看验证码"></p><h3 id="3-3-登录-Kibana"><a href="#3-3-登录-Kibana" class="headerlink" title="3.3 登录 Kibana"></a>3.3 登录 Kibana</h3><p>经过上面的配置后，就进入了登录页面：</p><p><img src="https://b3logfile.com/file/2023/09/siyuan/1524822749398/assets/image-20230909154206-v5z093x.png" alt="image" title="登录 Kibana"></p><p>这里需要输入账户名和密码，账户名就是 <code>elastic</code> ，密码是之前配置的，输入完成后，点击登录按钮就可以进入 Kibana 管理界面了。</p><p><img src="https://b3logfile.com/file/2023/09/siyuan/1524822749398/assets/image-20230909154417-p97fm7g.png" alt="image" title="Kibana 管理界面"></p><h2 id="四、参考"><a href="#四、参考" class="headerlink" title="四、参考"></a>四、参考</h2><ol><li><a href="https://www.elastic.co/guide/index.html">Elsatic 官方文档</a></li><li><a href="https://www.elastic.co/guide/en/elasticsearch/reference/8.9/docker.html#_add_more_nodes">Install EalsticSearch with Docker</a></li><li><a href="https://www.elastic.co/guide/en/kibana/current/docker.html#docker">Install Kibana with Docker</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>技术小结</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ElasticSearch</tag>
      
      <tag>Kibana</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ThinkBook14 + 2022 R7 6800H 版安装 Arch Linux 后键盘失效问题处理记录</title>
    <link href="/2023/08/29/arch-keyboard-error/"/>
    <url>/2023/08/29/arch-keyboard-error/</url>
    
    <content type="html"><![CDATA[<h2 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h2><p>一直都用的 Ubuntu 系统，最近看B站很多博主安利 arch linux，经不住诱惑的我，给自己的笔记本电脑（ThinkBook 14+ 2022 款，CPU R7 6800H）安装了 arch linux 系统，安装完成后发现键盘不可用，去网上查了很多资料，很多使用 R7 6800H CPU 的笔记本都有同样的问题，网上提供了以下几种解决方案：</p><h3 id="方案一：给当前内核增加补丁"><a href="#方案一：给当前内核增加补丁" class="headerlink" title="方案一：给当前内核增加补丁"></a>方案一：给当前内核增加补丁</h3><ol><li><a href="https://patchwork.kernel.org/project/linux-acpi/patch/20220712020058.90374-1-gch981213@gmail.com/">下载补丁</a>(点击右侧的diff即可下载)</li><li>将补丁添加到编译配置中</li><li>编译</li><li>安装</li><li>更新grub</li><li>重启</li></ol><p>这个方案可以参考 <a href="https://blog.hellowei.top/2022/09/20/Install-archlinux-on-Thinkbook14-G4-ARA/">Install archlinux on Thinkbook14 G4+ ARA</a>，这个方案我也做了，但是编译过程报错，所以放弃。</p><h3 id="方案二：使用GitHub上开源的驱动安装程序"><a href="#方案二：使用GitHub上开源的驱动安装程序" class="headerlink" title="方案二：使用GitHub上开源的驱动安装程序"></a>方案二：使用GitHub上开源的驱动安装程序</h3><p>这个参考：<a href="https://github.com/vrolife/modern_laptop">vrolife&#x2F;modernlaptop</a>，这个工具里面的补丁可能更适合小米系的笔记本，我安装失败，放弃。</p><h3 id="方案二：替换老版本的内核"><a href="#方案二：替换老版本的内核" class="headerlink" title="方案二：替换老版本的内核"></a>方案二：替换老版本的内核</h3><ol><li>编译老版本的内核</li><li>安装</li><li>更新grub</li><li>重启</li></ol><p>我采用的就是这个方案，我当前的内核版本是6.4.10，我替换成6.1.12后，成功解决键盘失效问题。</p><h2 id="二、arch-linux-内核编译过程记录"><a href="#二、arch-linux-内核编译过程记录" class="headerlink" title="二、arch linux 内核编译过程记录"></a>二、arch linux 内核编译过程记录</h2><p>本次编译是基于 arch linux 系统的，所以相关的操作都是参考了 <a href="https://wiki.archlinuxcn.org/wiki/%E5%86%85%E6%A0%B8">arch linux 内核 wiki</a>，我整理了其中的关键点。</p><h3 id="2-1-编译方式"><a href="#2-1-编译方式" class="headerlink" title="2.1 编译方式"></a>2.1 编译方式</h3><p>编译有两种方式：</p><ul><li><a href="https://wiki.archlinuxcn.org/wiki/%E5%86%85%E6%A0%B8/%E4%BC%A0%E7%BB%9F%E7%BC%96%E8%AF%91">传统方式</a>：需要手动下载内核源代码包，然后在自己的主目录里以普通用户的身份编译。</li><li><a href="https://wiki.archlinuxcn.org/wiki/%E5%86%85%E6%A0%B8/Arch_%E6%9E%84%E5%BB%BA%E7%B3%BB%E7%BB%9F">Arch 构建系统</a>：充分利用已有的高质量的 <a href="https://archlinux.org/packages/?name=linux">linux</a>包<a href="https://wiki.archlinuxcn.org/wiki/PKGBUILD" title="PKGBUILD">PKGBUILD</a> 且受益于<a href="https://en.wikipedia.org/wiki/Package_management_system" title="wikipedia:Package management system">包管理</a>。</li></ul><p>我选择的是第二种方式编译。</p><h3 id="2-2-编译步骤"><a href="#2-2-编译步骤" class="headerlink" title="2.2 编译步骤"></a>2.2 编译步骤</h3><h5 id="2-2-1-编译配置"><a href="#2-2-1-编译配置" class="headerlink" title="2.2.1 编译配置"></a>2.2.1 编译配置</h5><ol><li>创建构建目录</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">mkdi ~/build<br>cd build<br></code></pre></td></tr></table></figure><ol start="2"><li>下载官方编译配置</li></ol><p>可以通过 asp、svn和git去下载，我用的是的git， <a href="https://wiki.archlinuxcn.org/wiki/Arch_%E6%9E%84%E5%BB%BA%E7%B3%BB%E7%BB%9F">参考-如何使用 ABS</a>，可以去 <a href="https://gitlab.archlinux.org/archlinux/packaging/packages/linux/-/tags">arch linux gitlab官方仓库</a>查看有哪些版本可以下载</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git clone -b 6.1.12.arch1-1 https://gitlab.archlinux.org/archlinux/packaging/packages/linux.git<br></code></pre></td></tr></table></figure><h5 id="2-2-2-修改-PKGBUILD文件"><a href="#2-2-2-修改-PKGBUILD文件" class="headerlink" title="2.2.2 修改 PKGBUILD文件"></a>2.2.2 修改 PKGBUILD文件</h5><ol><li>修改 pkgbase</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">pkgbase=linux-custom<br></code></pre></td></tr></table></figure><ol start="2"><li>删除编译文档的相关配置</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">63c63<br>&lt;   make htmldocs all<br>---<br><span class="hljs-meta prompt_">&gt; </span><span class="language-bash">  make all</span><br>195c195<br>&lt; pkgname=(&quot;$pkgbase&quot; &quot;$pkgbase-headers&quot; &quot;$pkgbase-docs&quot;)<br>---<br><span class="hljs-meta prompt_">&gt; </span><span class="language-bash">pkgname=(<span class="hljs-string">&quot;<span class="hljs-variable">$pkgbase</span>&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$pkgbase</span>-headers&quot;</span>)</span><br></code></pre></td></tr></table></figure><ol start="3"><li>增加编译速度，在 make 指令后面加上 -j 16</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">build() &#123;<br>   cd $_srcname<br>   make all -j 16<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="2-2-3-生成校验和"><a href="#2-2-3-生成校验和" class="headerlink" title="2.2.3 生成校验和"></a>2.2.3 生成校验和</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo pacman -S pacman-contrib<br>updpkgsums<br></code></pre></td></tr></table></figure><h5 id="2-2-4-编译"><a href="#2-2-4-编译" class="headerlink" title="2.2.4 编译"></a>2.2.4 编译</h5><p>需要加上 <code>--skippgpcheck</code> 参数，否则会报错 PGP key could not foud</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">makepkg -s --skippgpcheck<br></code></pre></td></tr></table></figure><p>吐槽一下：编译过程非常漫长（约莫一个小时），且电脑发热非常严重，感觉都可以煎鸡蛋的了。所以好的CPU和散热是非常重要的。</p><h3 id="2-3-安装内核"><a href="#2-3-安装内核" class="headerlink" title="2.3 安装内核"></a>2.3 安装内核</h3><h5 id="2-3-1-安装"><a href="#2-3-1-安装" class="headerlink" title="2.3.1 安装"></a>2.3.1 安装</h5><p>编译完成后，在当前目录（~&#x2F;build&#x2F;linux）会生成两个文件，使用下面的命令安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo pacman -U linux-custom-6.1.12.arch1-1-x86_64.pkg.tar.zst linux-custom-headers-6.1.12.arch1-1-x86_64.pkg.tar.zst<br></code></pre></td></tr></table></figure><h5 id="2-3-2-更新引导程序"><a href="#2-3-2-更新引导程序" class="headerlink" title="2.3.2 更新引导程序"></a>2.3.2 更新引导程序</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo grub-mkconfig -o /boot/grub/grub.cfg<br></code></pre></td></tr></table></figure><h5 id="2-3-3-重启"><a href="#2-3-3-重启" class="headerlink" title="2.3.3 重启"></a>2.3.3 重启</h5><p>通过 <code>uname -a 指令查看内核</code>，输出如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">Linux myarch 6.1.12-arch1-1-custom #1 SMP PREEMPT_DYNAMIC Fri, 18 Aug 2023 07:24:51 +0000 x86_64 GNU/Linux<br></code></pre></td></tr></table></figure><h2 id="三、参考连接"><a href="#三、参考连接" class="headerlink" title="三、参考连接"></a>三、参考连接</h2><ol><li><a href="https://gitlab.archlinux.org/archlinux/packaging/packages/linux/-/tags">official Arch Linux kernel</a></li><li><a href="https://blog.hellowei.top/2022/09/20/Install-archlinux-on-Thinkbook14-G4-ARA/">Install archlinux on Thinkbook14 G4+ ARA</a></li><li><a href="https://wiki.archlinuxcn.org/wiki/%E5%86%85%E6%A0%B8/Arch_%E6%9E%84%E5%BB%BA%E7%B3%BB%E7%BB%9F">内核&#x2F;Arch 构建系统</a></li><li><a href="https://zhuanlan.zhihu.com/p/530643928">Redmibook Pro 15 2022 锐龙版 的Linux驱动</a></li><li><a href="https://github.com/vrolife/modern_laptop">modern_laptop</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>操作系统</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo + GitHub Pages 搭建个人博客</title>
    <link href="/2023/08/28/hexo-install-and-usage/"/>
    <url>/2023/08/28/hexo-install-and-usage/</url>
    
    <content type="html"><![CDATA[<h2 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h2><p>本篇博客主要记录了我使用 <a href="https://hexo.io/zh-cn/">Hexo </a> 和 GitHub Pages 搭建博客的过程，主要有以下几部分内容：</p><ul><li>Hexo 博客基本使用</li><li>Hexo 配置优化</li><li>使用 GitHub Pages 部署 Hexo</li><li>配置域名</li><li>总结</li></ul><h2 id="二、Hexo-基础使用"><a href="#二、Hexo-基础使用" class="headerlink" title="二、Hexo 基础使用"></a>二、Hexo 基础使用</h2><h3 id="2-1-安装-Hexo"><a href="#2-1-安装-Hexo" class="headerlink" title="2.1 安装 Hexo"></a>2.1 安装 Hexo</h3><p>前置条件：安装使用 Hexo 需要先安装 <a href="https://nodejs.org/en">Nodejs </a>和 <a href="https://git-scm.com/">Git </a>，这个根据自己的操作系统和使用习惯来进行安装，我就不赘述了。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install -g hexo-cli<br></code></pre></td></tr></table></figure><h3 id="2-2-初始化-Hexo-博客"><a href="#2-2-初始化-Hexo-博客" class="headerlink" title="2.2 初始化 Hexo 博客"></a>2.2 初始化 Hexo 博客</h3><p>执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo init blog<br></code></pre></td></tr></table></figure><p>Hexo 的初始文件如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">.<br>├── _config.yml<br>├── package.json<br>├── scaffolds<br>├── source<br>|   ├── _drafts<br>|   └── _posts<br>└── themes<br></code></pre></td></tr></table></figure><p>其中比较重要的是 _config.yml 配置文件，配置文件的内容可以参考 <a href="https://hexo.io/zh-cn/docs/configuration">Hexo 配置</a>。</p><h3 id="2-3-运行"><a href="#2-3-运行" class="headerlink" title="2.3 运行"></a>2.3 运行</h3><p>初始化完成之后，进入 Hexo 博客目录 ，然后执行下面的指令安装依赖和启动服务。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">安装依赖</span><br>npm install<br><span class="hljs-meta prompt_"># </span><span class="language-bash">启动服务</span><br>hexo s<br></code></pre></td></tr></table></figure><p>然后在浏览器输入 ：<a href="http://127.0.0.1:4000/">http://127.0.0.1:4000/</a> 就可以看到如下界面：</p><p><img src="https://b3logfile.com/file/2023/08/image-20230828171722-zgfnh4c-Y2y0zNC.png" alt="Hexo 启动"></p><h2 id="三、Hexo-优化"><a href="#三、Hexo-优化" class="headerlink" title="三、Hexo 优化"></a>三、Hexo 优化</h2><p>Hexo 优化包括很多方面，如配置主题、添加菜单、添加搜索功能、添加网站统计等。我直接使用了一套现成的主题配置方案，叫做 <a href="https://hexo.fluid-dev.com/docs/">Fluid</a>。</p><h3 id="3-1-主题配置"><a href="#3-1-主题配置" class="headerlink" title="3.1 主题配置"></a>3.1 主题配置</h3><h5 id="3-1-1-安装-Fluid-主题"><a href="#3-1-1-安装-Fluid-主题" class="headerlink" title="3.1.1 安装 Fluid 主题"></a>3.1.1 安装 Fluid 主题</h5><p>进入 Hexo 博客目录，执行下面的命令，完成 <a href="https://hexo.fluid-dev.com/docs/">Fluid</a> 主题安装。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install --save hexo-theme-fluid<br></code></pre></td></tr></table></figure><h5 id="3-1-2-创建-Fluid-配置文件"><a href="#3-1-2-创建-Fluid-配置文件" class="headerlink" title="3.1.2 创建 Fluid 配置文件"></a>3.1.2 创建 Fluid 配置文件</h5><p>这里可以在 node_modules&#x2F;hexo-theme-fluid&#x2F; 目录下复制一份 <a href="https://hexo.fluid-dev.com/docs/">Fluid </a>主题默认的配置文件。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">cp node_modules/hexo-theme-fluid/_config.yml _config.fluid.yml<br></code></pre></td></tr></table></figure><h5 id="3-1-3-使用-Fluid-主题"><a href="#3-1-3-使用-Fluid-主题" class="headerlink" title="3.1.3 使用 Fluid 主题"></a>3.1.3 使用 Fluid 主题</h5><p>编辑 hexo 目录下的 _config.yml配置文件，将主题切换为 fluid</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">theme:</span> <span class="hljs-string">fluid</span><br></code></pre></td></tr></table></figure><p>然后执行 hexo -s 命令启动服务器，在浏览器输入 ：<a href="http://127.0.0.1:4000/">http://127.0.0.1:4000/</a> 就可以看到 <a href="https://hexo.fluid-dev.com/docs/">Fluid</a> 主题已经配置成功了。</p><p><img src="https://b3logfile.com/file/2023/08/image-20230828172529-8y5hxpq-kuOKt1G.png" alt="Fluid 主题配置"></p><h3 id="3-2-twikoo-评论插件配置"><a href="#3-2-twikoo-评论插件配置" class="headerlink" title="3.2 twikoo 评论插件配置"></a>3.2 twikoo 评论插件配置</h3><p>评论插件的选择很多，对比了之后，我选择了 <a href="https://twikoo.js.org/">Twikoo</a> 这款评论插件，使用 <a href="https://twikoo.js.org/quick-start.html#zeabur-%E9%83%A8%E7%BD%B2">Zeabur 部署</a>，部署成功后，需要自己设置一个域名，例如 <a href="https://mytwikoo.zeabur.app.然后在/">https://mytwikoo.zeabur.app。然后在</a> _config.fluid.yml 配置文件中做如下配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># 1. 找到 comments 配置，设置类型为 twikoo</span><br><span class="hljs-attr">comments:</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">twikoo</span><br><br><span class="hljs-comment"># 2. 找到 twikoo 配置项，将其中的 envId 配置为部署 twikoo 后设置的域名 </span><br><span class="hljs-attr">twikoo:</span><br>    <span class="hljs-attr">envId:</span> <span class="hljs-string">https://mytwikoo.zeabur.app</span><br></code></pre></td></tr></table></figure><p>配置完成后，执行 hexo -s 启动服务，查看博客详情，看到如下界面就说明配置成功了。</p><p><img src="https://b3logfile.com/file/2023/08/image-20230828173935-ybeswym-nUirAdE.png" alt="twikoo 插件配置"></p><h3 id="3-3-配置网站运行天数"><a href="#3-3-配置网站运行天数" class="headerlink" title="3.3 配置网站运行天数"></a>3.3 配置网站运行天数</h3><p>在 _config.fluid.yml 配置文件中找到 footer 配置，将 content 配置成下面的代码：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">footer:</span><br>  <span class="hljs-attr">content:</span> <span class="hljs-string">&#x27;</span><br><span class="hljs-string">    &lt;a href=&quot;https://hexo.io&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener&quot;&gt;&lt;span&gt;Hexo&lt;/span&gt;&lt;/a&gt;</span><br><span class="hljs-string">    &lt;i class=&quot;iconfont icon-love&quot;&gt;&lt;/i&gt;</span><br><span class="hljs-string">    &lt;a href=&quot;https://github.com/fluid-dev/hexo-theme-fluid&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener&quot;&gt;&lt;span&gt;Fluid&lt;/span&gt;&lt;/a&gt;</span><br><span class="hljs-string">    &lt;div style=&quot;font-size: 0.85rem&quot;&gt;</span><br><span class="hljs-string">      &lt;span id=&quot;timeDate&quot;&gt;载入天数...&lt;/span&gt;</span><br><span class="hljs-string">      &lt;span id=&quot;times&quot;&gt;载入时分秒...&lt;/span&gt;</span><br><span class="hljs-string">      &lt;script src=&quot;/js/duration.js&quot;&gt;&lt;/script&gt;</span><br><span class="hljs-string">    &lt;/div&gt;</span><br><span class="hljs-string">  &#x27;</span><br></code></pre></td></tr></table></figure><p>然后在 source&#x2F;js 目录下创建 duration.js 文件，里面加入如下代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs javascript">!(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-comment">/** 计时起始时间，自行修改 **/</span><br>  <span class="hljs-keyword">var</span> start = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(<span class="hljs-string">&quot;2020/01/01 00:00:00&quot;</span>);<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">update</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> now = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();<br>    now.<span class="hljs-title function_">setTime</span>(now.<span class="hljs-title function_">getTime</span>()+<span class="hljs-number">250</span>);<br>    days = (now - start) / <span class="hljs-number">1000</span> / <span class="hljs-number">60</span> / <span class="hljs-number">60</span> / <span class="hljs-number">24</span>;<br>    dnum = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(days);<br>    hours = (now - start) / <span class="hljs-number">1000</span> / <span class="hljs-number">60</span> / <span class="hljs-number">60</span> - (<span class="hljs-number">24</span> * dnum);<br>    hnum = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(hours);<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title class_">String</span>(hnum).<span class="hljs-property">length</span> === <span class="hljs-number">1</span> )&#123;<br>      hnum = <span class="hljs-string">&quot;0&quot;</span> + hnum;<br>    &#125;<br>    minutes = (now - start) / <span class="hljs-number">1000</span> /<span class="hljs-number">60</span> - (<span class="hljs-number">24</span> * <span class="hljs-number">60</span> * dnum) - (<span class="hljs-number">60</span> * hnum);<br>    mnum = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(minutes);<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title class_">String</span>(mnum).<span class="hljs-property">length</span> === <span class="hljs-number">1</span> )&#123;<br>      mnum = <span class="hljs-string">&quot;0&quot;</span> + mnum;<br>    &#125;<br>    seconds = (now - start) / <span class="hljs-number">1000</span> - (<span class="hljs-number">24</span> * <span class="hljs-number">60</span> * <span class="hljs-number">60</span> * dnum) - (<span class="hljs-number">60</span> * <span class="hljs-number">60</span> * hnum) - (<span class="hljs-number">60</span> * mnum);<br>    snum = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">round</span>(seconds);<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title class_">String</span>(snum).<span class="hljs-property">length</span> === <span class="hljs-number">1</span> )&#123;<br>      snum = <span class="hljs-string">&quot;0&quot;</span> + snum;<br>    &#125;<br>    <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;timeDate&quot;</span>).<span class="hljs-property">innerHTML</span> = <span class="hljs-string">&quot;本站安全运行&amp;nbsp&quot;</span>+dnum+<span class="hljs-string">&quot;&amp;nbsp天&quot;</span>;<br>    <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;times&quot;</span>).<span class="hljs-property">innerHTML</span> = hnum + <span class="hljs-string">&quot;&amp;nbsp小时&amp;nbsp&quot;</span> + mnum + <span class="hljs-string">&quot;&amp;nbsp分&amp;nbsp&quot;</span> + snum + <span class="hljs-string">&quot;&amp;nbsp秒&quot;</span>;<br>  &#125;<br><br>  <span class="hljs-title function_">update</span>();<br>  <span class="hljs-built_in">setInterval</span>(update, <span class="hljs-number">1000</span>);<br>&#125;)();<br></code></pre></td></tr></table></figure><h3 id="3-4-其他配置"><a href="#3-4-其他配置" class="headerlink" title="3.4 其他配置"></a>3.4 其他配置</h3><p>还有很多细枝末节的配置，我就不一一展开了，可以参考 <a href="https://hexo.fluid-dev.com/docs/guide/#%E5%85%B3%E4%BA%8E%E6%8C%87%E5%8D%97">Fluid 配置指南</a>，根据文档来进行即可。</p><h2 id="四、使用-GitHub-Pages-部署-Hexo"><a href="#四、使用-GitHub-Pages-部署-Hexo" class="headerlink" title="四、使用 GitHub Pages 部署 Hexo"></a>四、使用 GitHub Pages 部署 Hexo</h2><p>GitHub Pages 的相关知识可以参考<a href="https://docs.github.com/zh/pages/getting-started-with-github-pages/about-github-pages"> GitHub Pages 文档</a>。</p><h3 id="4-1-创建-Github-Pages-仓库"><a href="#4-1-创建-Github-Pages-仓库" class="headerlink" title="4.1 创建 Github Pages 仓库"></a>4.1 创建 Github Pages 仓库</h3><p>在自己的 GitHub 创建一个名为 <username>.github.io 的仓库，其中 username 就是 GitHub 用户名，例如我的用户名是 marshalby2, 那我创建的仓库名就是 marshalby2.github.io</p><h3 id="4-2-安装-hexo-deployer-git"><a href="#4-2-安装-hexo-deployer-git" class="headerlink" title="4.2 安装 hexo-deployer-git"></a>4.2 安装 hexo-deployer-git</h3><p>进入 Hexo 博客目录下，执行下面的安装命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install hexo-deployer-git --save<br></code></pre></td></tr></table></figure><h3 id="4-3-配置-SSH-密钥"><a href="#4-3-配置-SSH-密钥" class="headerlink" title="4.3 配置 SSH 密钥"></a>4.3 配置 SSH 密钥</h3><p>先简单说一下过程，就是在我们本地的电脑上生成一个 SSH 密钥，然后将其中的 SSH 公钥配置到 GitHub 中，就可以实现无密码访问我们的 GitHub 仓库了，更多的细节可以参考 <a href="https://docs.github.com/zh/authentication/connecting-to-github-with-ssh/about-ssh">GitHub 文档 - 使用 SSH 进行连接</a>。下面是配置过程：</p><h5 id="4-3-1-生成-SSH-密钥"><a href="#4-3-1-生成-SSH-密钥" class="headerlink" title="4.3.1 生成 SSH 密钥"></a>4.3.1 生成 SSH 密钥</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">生成 ssh 密钥</span><br>ssh-keygen -t ed25519 -C &quot;your_email@example.com&quot;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看公钥</span><br>cat ~/.ssh/id_ed25519.pub<br></code></pre></td></tr></table></figure><h5 id="4-3-2-将-SSH-公钥添加到-GitHub-中"><a href="#4-3-2-将-SSH-公钥添加到-GitHub-中" class="headerlink" title="4.3.2 将 SSH 公钥添加到 GitHub 中"></a>4.3.2 将 SSH 公钥添加到 GitHub 中</h5><p>进入 GitHub 个人设置中，找到 SSH and GPG keys，然后点击 New SSH key 将上一步生成的公钥添加进去。<br><img src="https://b3logfile.com/file/2023/08/image-20230828184312-5mjhfjt-ub0PtJB.png" alt="添加 SSH key"></p><h5 id="4-3-3-测试-SSH-连接"><a href="#4-3-3-测试-SSH-连接" class="headerlink" title="4.3.3 测试 SSH 连接"></a>4.3.3 测试 SSH 连接</h5><p>打开终端，执行下面的命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ssh -T git@github.com<br></code></pre></td></tr></table></figure><p>如果出现以下内容，则说明配置成功</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">Hi USERNAME! You&#x27;ve successfully authenticated, but GitHub does not<br></code></pre></td></tr></table></figure><h3 id="4-4-修改配置"><a href="#4-4-修改配置" class="headerlink" title="4.4 修改配置"></a>4.4 修改配置</h3><p>编辑 _config.yml 文件，找到 deploy 配置，加入 Github Pages 仓库的地址</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">deploy:<br>  type: git<br>  repo: git@github.com:marshalby2/marshalby2.github.io.git<br>  branch: master<br></code></pre></td></tr></table></figure><h3 id="4-5-生成站点文件并推送至远程库"><a href="#4-5-生成站点文件并推送至远程库" class="headerlink" title="4.5 生成站点文件并推送至远程库"></a>4.5 生成站点文件并推送至远程库</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo clean &amp;&amp; hexo deploy<br></code></pre></td></tr></table></figure><p>推送成功后，就可以直接通过 GitHub 的域名 <a href="https://marshalby2.github.io/">https://marshalby2.github.io</a> 来访问我们的的博客了。</p><h2 id="五、配置域名"><a href="#五、配置域名" class="headerlink" title="五、配置域名"></a>五、配置域名</h2><h3 id="5-1-域名购买和解析"><a href="#5-1-域名购买和解析" class="headerlink" title="5.1 域名购买和解析"></a>5.1 域名购买和解析</h3><p>普通的域名还是很便宜的，可以选择腾讯云和阿里云。我对比了一下普通域名的费用，阿里云会便宜一些，我就在阿里云购买了域名。购买完成后需要解析到我们的 GitHub Pages 仓库地址。照着下面截图的方式创建两条解析记录：</p><p><img src="https://b3logfile.com/file/2023/08/image-20230828191014-u67197i-H9vjlGl.png" alt="添加解析"></p><p>添加完如下所示：</p><p><img src="https://b3logfile.com/file/2023/08/image-20230828190853-wl1m38z-ii9zrTl.png" alt="解析记录"></p><h3 id="5-2-域名配置"><a href="#5-2-域名配置" class="headerlink" title="5.2 域名配置"></a>5.2 域名配置</h3><p>在 GitHub Pages 仓库中，依次点击 Settings -&gt; Pages，然后就会看到下面的配置，在 Custome domain 中填入购买的域名，并将 Enforce HTTPS 选上。<br><img src="https://b3logfile.com/file/2023/08/image-20230828191210-yq3y5z9-9bvVHLF.png" alt="GitHub Pages 域名配置"></p><p>配置完后，就可以通过域名 <a href="https://marshalby2.site/">https://marshalby2.site</a> 访问博客了。</p><h3 id="5-3-创建-CNAME-文件"><a href="#5-3-创建-CNAME-文件" class="headerlink" title="5.3 创建 CNAME 文件"></a>5.3 创建 CNAME 文件</h3><p>配置到上一步就可以通过域名访问博客了，但是有个问题，每次部署博客后（执行 <code>hexo d</code> 指令），都会把上一步配置的域名清空，所以还需要在博客目录下的  source 文件下创建 CNAME 文件，在里面填入我们的域名。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">&gt; </span><span class="language-bash"><span class="hljs-built_in">cat</span> <span class="hljs-built_in">source</span>/CNAME</span><br>marshalby2.site<br></code></pre></td></tr></table></figure><p>至此，域名配置的所有步骤就结束了。</p><h2 id="五、总结"><a href="#五、总结" class="headerlink" title="五、总结"></a>五、总结</h2><p>本篇博客主要记录了通过 Hexo 和 GitHub Pages 搭建一个静态博客的过程，然后做了一些简单的配置优化，后续有其他方面的配置优化，再做记录。如果觉得访问 GitHub Pages 很慢，改进的方案是可以将博客部署到 Gitee 或者 Coding 平台，这些平台都提供了类似 GitHub Pages的功能。</p><p>‍</p><p>‍</p>]]></content>
    
    
    <categories>
      
      <category>技术小结</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
